[
    {
        "question_text": "How do you create a new Django project?",
        "optionA": "django-admin startproject projectname",
        "optionB": "django-admin createproject projectname",
        "optionC": "django-admin newproject projectname",
        "optionD": "django-admin initproject projectname",
        "answer": "django-admin startproject projectname",
        "category": "Django"
    },
    {
        "question_text": "Which template tag is used to render variables in Django templates?",
        "optionA": "{{ variable }}",
        "optionB": "{% variable %}",
        "optionC": "{# variable #}",
        "optionD": "{@ variable @}",
        "answer": "{{ variable }}",
        "category": "Django"
    },
    {
        "question_text": "What does the `get_object_or_404` function do in Django?",
        "optionA": "Returns a model instance or raises a 404 error if not found",
        "optionB": "Deletes a model instance or raises a 404 error if not found",
        "optionC": "Creates a model instance or raises a 404 error if not found",
        "optionD": "Updates a model instance or raises a 404 error if not found",
        "answer": "Returns a model instance or raises a 404 error if not found",
        "category": "Django"
    },
    {
        "question_text": "Which method is used to handle form submissions in Django views?",
        "optionA": "POST",
        "optionB": "GET",
        "optionC": "PUT",
        "optionD": "DELETE",
        "answer": "POST",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of the `manage.py` file in a Django project?",
        "optionA": "A command-line utility to interact with the project",
        "optionB": "Defines the database models",
        "optionC": "Configures the settings for the project",
        "optionD": "Manages the project's templates",
        "answer": "A command-line utility to interact with the project",
        "category": "Django"
    },
    {
        "question_text": "Which command is used to apply database migrations in Django?",
        "optionA": "python manage.py migrate",
        "optionB": "python manage.py makemigrations",
        "optionC": "python manage.py startapp",
        "optionD": "python manage.py runserver",
        "answer": "python manage.py migrate",
        "category": "Django"
    },
    {
        "question_text": "How do you define a model field for storing large text data in Django?",
        "optionA": "TextField",
        "optionB": "CharField",
        "optionC": "LargeTextField",
        "optionD": "StringField",
        "answer": "TextField",
        "category": "Django"
    },
    {
        "question_text": "What does the `render` function do in Django views?",
        "optionA": "Renders an HTML template with context data",
        "optionB": "Sends a JSON response",
        "optionC": "Redirects to another URL",
        "optionD": "Returns an HTTP response",
        "answer": "Renders an HTML template with context data",
        "category": "Django"
    },
    {
        "question_text": "Which setting in `settings.py` configures the URL for static files?",
        "optionA": "STATIC_URL",
        "optionB": "STATIC_ROOT",
        "optionC": "MEDIA_URL",
        "optionD": "MEDIA_ROOT",
        "answer": "STATIC_URL",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is NOT a built-in Django form field?",
        "optionA": "EmailField",
        "optionB": "DateField",
        "optionC": "ChoiceField",
        "optionD": "NumberField",
        "answer": "NumberField",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of the `urls.py` file in a Django app?",
        "optionA": "Defines URL patterns for the app",
        "optionB": "Defines database models",
        "optionC": "Handles HTTP requests",
        "optionD": "Configures the app's settings",
        "answer": "Defines URL patterns for the app",
        "category": "Django"
    },
    {
        "question_text": "How do you create a Django model field for storing date and time information?",
        "optionA": "DateTimeField",
        "optionB": "DateField",
        "optionC": "TimeField",
        "optionD": "TimestampField",
        "answer": "DateTimeField",
        "category": "Django"
    },
    {
        "question_text": "What does the `django.contrib.auth` module provide?",
        "optionA": "Authentication and authorization functionality",
        "optionB": "Template rendering functionality",
        "optionC": "Static file management functionality",
        "optionD": "Database migration functionality",
        "answer": "Authentication and authorization functionality",
        "category": "Django"
    },
    {
        "question_text": "Which command is used to create a new Django app?",
        "optionA": "python manage.py startapp appname",
        "optionB": "python manage.py createapp appname",
        "optionC": "python manage.py newapp appname",
        "optionD": "python manage.py initapp appname",
        "answer": "python manage.py startapp appname",
        "category": "Django"
    },
    {
        "question_text": "How do you set a default value for a model field in Django?",
        "optionA": "Using the `default` argument",
        "optionB": "Using the `initial` argument",
        "optionC": "Using the `value` argument",
        "optionD": "Using the `default_value` argument",
        "answer": "Using the `default` argument",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a valid Django model field type?",
        "optionA": "EmailField",
        "optionB": "IPAddressField",
        "optionC": "SlugField",
        "optionD": "CurrencyField",
        "answer": "SlugField",
        "category": "Django"
    },
    {
        "question_text": "What does the `@require_http_methods` decorator do in Django?",
        "optionA": "Restricts a view to specific HTTP methods",
        "optionB": "Exempts a view from CSRF protection",
        "optionC": "Handles form validation",
        "optionD": "Checks if a user is authenticated",
        "answer": "Restricts a view to specific HTTP methods",
        "category": "Django"
    },
    {
        "question_text": "How do you serve static files in production with Django?",
        "optionA": "Using a web server like Nginx or Apache",
        "optionB": "Using the built-in development server",
        "optionC": "Using the `django-static` package",
        "optionD": "Using the `runserver` command",
        "answer": "Using a web server like Nginx or Apache",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is used to create custom error pages in Django?",
        "optionA": "Creating custom views for error handlers",
        "optionB": "Modifying the `urls.py` file",
        "optionC": "Editing the `settings.py` file",
        "optionD": "Using the `error_pages.py` file",
        "answer": "Creating custom views for error handlers",
        "category": "Django"
    },
    {
        "question_text": "How do you define a primary key field in a Django model?",
        "optionA": "By setting `primary_key=True` in a field definition",
        "optionB": "By setting `unique=True` in a field definition",
        "optionC": "By setting `index=True` in a field definition",
        "optionD": "By setting `nullable=False` in a field definition",
        "answer": "By setting `primary_key=True` in a field definition",
        "category": "Django"
    },
    {
        "question_text": "What does the `DEBUG` setting do in Django?",
        "optionA": "Enables or disables debug mode",
        "optionB": "Sets the logging level to debug",
        "optionC": "Displays debug information in templates",
        "optionD": "Logs debug messages to the console",
        "answer": "Enables or disables debug mode",
        "category": "Django"
    },
    {
        "question_text": "Which method is used to check if a form is valid in Django?",
        "optionA": "is_valid()",
        "optionB": "validate()",
        "optionC": "check()",
        "optionD": "is_clean()",
        "answer": "is_valid()",
        "category": "Django"
    },
    {
        "question_text": "How do you define a custom template filter in Django?",
        "optionA": "Using the `@register.filter` decorator",
        "optionB": "Using the `@register.template_filter` decorator",
        "optionC": "Using the `@register.custom_filter` decorator",
        "optionD": "Using the `@register.filter_func` decorator",
        "answer": "Using the `@register.filter` decorator",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of the `apps.py` file in a Django app?",
        "optionA": "Configures the app",
        "optionB": "Defines URL patterns",
        "optionC": "Handles HTTP requests",
        "optionD": "Manages static files",
        "answer": "Configures the app",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is NOT a valid Django template filter?",
        "optionA": "add",
        "optionB": "multiply",
        "optionC": "subtract",
        "optionD": "divide",
        "answer": "subtract",
        "category": "Django"
    },
    {
        "question_text": "How do you specify a custom admin site in Django?",
        "optionA": "By subclassing `AdminSite`",
        "optionB": "By editing the `urls.py` file",
        "optionC": "By modifying the `settings.py` file",
        "optionD": "By creating an `admin.py` file",
        "answer": "By subclassing `AdminSite`",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a valid Django template tag?",
        "optionA": "url",
        "optionB": "path",
        "optionC": "link",
        "optionD": "route",
        "answer": "url",
        "category": "Django"
    },
    {
        "question_text": "What does the `@permission_required` decorator do?",
        "optionA": "Checks if a user has a specific permission",
        "optionB": "Redirects to the login page if the user is not authenticated",
        "optionC": "Exempts a view from CSRF protection",
        "optionD": "Handles form validation",
        "answer": "Checks if a user has a specific permission",
        "category": "Django"
    },
    {
        "question_text": "How do you define a one-to-one relationship in Django models?",
        "optionA": "Using the `OneToOneField`",
        "optionB": "Using the `ForeignKey`",
        "optionC": "Using the `ManyToManyField`",
        "optionD": "Using the `UniqueField`",
        "answer": "Using the `OneToOneField`",
        "category": "Django"
    },
    {
        "question_text": "Which command is used to run tests in a Django project?",
        "optionA": "python manage.py test",
        "optionB": "python manage.py runtests",
        "optionC": "python manage.py checktests",
        "optionD": "python manage.py unittest",
        "answer": "python manage.py test",
        "category": "Django"
    },
    {
        "question_text": "What is the default port number for Django's development server?",
        "optionA": "8000",
        "optionB": "8080",
        "optionC": "8888",
        "optionD": "9000",
        "answer": "8000",
        "category": "Django"
    },
    {
        "question_text": "In Django, what does the `makemigrations` command do?",
        "optionA": "Applies database migrations",
        "optionB": "Creates new migration files",
        "optionC": "Starts the development server",
        "optionD": "Collects static files",
        "answer": "Creates new migration files",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of Django's `views.py` file?",
        "optionA": "Handles HTTP requests and returns responses",
        "optionB": "Defines database models",
        "optionC": "Manages static files",
        "optionD": "Configures URL patterns",
        "answer": "Handles HTTP requests and returns responses",
        "category": "Django"
    },
    {
        "question_text": "How do you define a URL namespace in Django?",
        "optionA": "Using the `namespace` argument in the `include` function",
        "optionB": "Using the `name` argument in the `path` function",
        "optionC": "Using the `app_name` variable in the `urls.py` file",
        "optionD": "Using the `url_namespace` variable in the `settings.py` file",
        "answer": "Using the `namespace` argument in the `include` function",
        "category": "Django"
    },
    {
        "question_text": "What does the `@login_required` decorator do?",
        "optionA": "Redirects to the login page if the user is not authenticated",
        "optionB": "Handles form validation",
        "optionC": "Exempts a view from CSRF protection",
        "optionD": "Checks if a user has a specific permission",
        "answer": "Redirects to the login page if the user is not authenticated",
        "category": "Django"
    },
    {
        "question_text": "Which command is used to create a new Django superuser?",
        "optionA": "python manage.py createsuperuser",
        "optionB": "python manage.py createsuper",
        "optionC": "django-admin createsuperuser",
        "optionD": "django-admin createsuper",
        "answer": "python manage.py createsuperuser",
        "category": "Django"
    },
    {
        "question_text": "How do you include another template in a Django template?",
        "optionA": "{% include 'template.html' %}",
        "optionB": "{{ include 'template.html' }}",
        "optionC": "{ include 'template.html' }",
        "optionD": "{% load 'template.html' %}",
        "answer": "{% include 'template.html' %}",
        "category": "Django"
    },
    {
        "question_text": "What does the `ManyToManyField` field type represent in Django?",
        "optionA": "A many-to-many relationship",
        "optionB": "A one-to-one relationship",
        "optionC": "A many-to-one relationship",
        "optionD": "A one-to-many relationship",
        "answer": "A many-to-many relationship",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is NOT a valid Django template tag?",
        "optionA": "extends",
        "optionB": "block",
        "optionC": "comment",
        "optionD": "loop",
        "answer": "loop",
        "category": "Django"
    },
    {
        "question_text": "How do you specify a related name for a `ForeignKey` field in Django?",
        "optionA": "Using the `related_name` argument",
        "optionB": "Using the `related_field` argument",
        "optionC": "Using the `related_query_name` argument",
        "optionD": "Using the `related_relation` argument",
        "answer": "Using the `related_name` argument",
        "category": "Django"
    },
    {
        "question_text": "What is the default name of the primary key field in Django models?",
        "optionA": "id",
        "optionB": "pk",
        "optionC": "key",
        "optionD": "primary_key",
        "answer": "id",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a valid Django template filter?",
        "optionA": "length",
        "optionB": "size",
        "optionC": "count",
        "optionD": "total",
        "answer": "length",
        "category": "Django"
    },
    {
        "question_text": "How do you create a URL pattern in Django?",
        "optionA": "Using the `path` function",
        "optionB": "Using the `url` function",
        "optionC": "Using the `route` function",
        "optionD": "Using the `link` function",
        "answer": "Using the `path` function",
        "category": "Django"
    },
    {
        "question_text": "What does the `CharField` field type represent in Django?",
        "optionA": "A string field",
        "optionB": "An integer field",
        "optionC": "A date field",
        "optionD": "A boolean field",
        "answer": "A string field",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a valid Django model field?",
        "optionA": "CharField",
        "optionB": "StringField",
        "optionC": "TextField",
        "optionD": "UrlField",
        "answer": "CharField",
        "category": "Django"
    },
    {
        "question_text": "How do you define a form class in Django?",
        "optionA": "By creating a class that inherits from `django.forms.Form`",
        "optionB": "By creating a class that inherits from `django.db.models.Model`",
        "optionC": "By creating a class that inherits from `django.views.View`",
        "optionD": "By creating a class that inherits from `django.template.Template`",
        "answer": "By creating a class that inherits from `django.forms.Form`",
        "category": "Django"
    },
    {
        "question_text": "What does the `HttpResponse` class do in Django?",
        "optionA": "Returns an HTTP response",
        "optionB": "Redirects to another URL",
        "optionC": "Renders an HTML template",
        "optionD": "Returns a JSON response",
        "answer": "Returns an HTTP response",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a Django settings variable?",
        "optionA": "DATABASES",
        "optionB": "DATABASE_URL",
        "optionC": "DATABASE_URI",
        "optionD": "DATABASE_CONFIG",
        "answer": "DATABASES",
        "category": "Django"
    },
    {
        "question_text": "How do you start the Django development server?",
        "optionA": "python manage.py runserver",
        "optionB": "django-admin startproject",
        "optionC": "python manage.py startapp",
        "optionD": "django-admin runserver",
        "answer": "python manage.py runserver",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of Django's `admin.py` file?",
        "optionA": "Configures the admin interface",
        "optionB": "Defines database models",
        "optionC": "Handles URL routing",
        "optionD": "Manages static files",
        "answer": "Configures the admin interface",
        "category": "Django"
    },
    {
        "question_text": "What does the `@csrf_exempt` decorator do?",
        "optionA": "Exempts a view from CSRF protection",
        "optionB": "Handles static file management",
        "optionC": "Defines custom middleware",
        "optionD": "Configures URL routing",
        "answer": "Exempts a view from CSRF protection",
        "category": "Django"
    },
    {
        "question_text": "Which command is used to create database migrations in Django?",
        "optionA": "python manage.py makemigrations",
        "optionB": "python manage.py migrate",
        "optionC": "python manage.py startapp",
        "optionD": "python manage.py runserver",
        "answer": "python manage.py makemigrations",
        "category": "Django"
    },
    {
        "question_text": "What does the `__str__` method in a Django model do?",
        "optionA": "Defines a human-readable string representation",
        "optionB": "Defines the model's primary key",
        "optionC": "Defines a custom query",
        "optionD": "Defines a one-to-one relationship",
        "answer": "Defines a human-readable string representation",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is used to handle URL routing in Django?",
        "optionA": "urls.py",
        "optionB": "views.py",
        "optionC": "models.py",
        "optionD": "forms.py",
        "answer": "urls.py",
        "category": "Django"
    },
    {
        "question_text": "How do you specify a related name for a `ForeignKey` field in Django?",
        "optionA": "Using the `related_name` argument",
        "optionB": "Using the `related_field` argument",
        "optionC": "Using the `related_query_name` argument",
        "optionD": "Using the `related_relation` argument",
        "answer": "Using the `related_name` argument",
        "category": "Django"
    },
    {
        "question_text": "What does the `CharField` field type represent in Django?",
        "optionA": "A string field",
        "optionB": "An integer field",
        "optionC": "A date field",
        "optionD": "A boolean field",
        "answer": "A string field",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a valid Django template filter?",
        "optionA": "length",
        "optionB": "size",
        "optionC": "count",
        "optionD": "total",
        "answer": "length",
        "category": "Django"
    },
    {
        "question_text": "What is the default primary key field type in Django models?",
        "optionA": "AutoField",
        "optionB": "UUIDField",
        "optionC": "CharField",
        "optionD": "IntegerField",
        "answer": "AutoField",
        "category": "Django"
    },
    {
        "question_text": "What does the `collectstatic` command do in Django?",
        "optionA": "Collects all static files into a single location",
        "optionB": "Starts the development server",
        "optionC": "Creates database migrations",
        "optionD": "Runs database migrations",
        "answer": "Collects all static files into a single location",
        "category": "Django"
    }
,    {
        "question_text": "Which command is used to create an empty Django project?",
        "optionA": "django-admin startapp",
        "optionB": "django-admin startproject",
        "optionC": "django-admin runserver",
        "optionD": "django-admin migrate",
        "answer": "django-admin startproject",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of Django's `manage.py` file?",
        "optionA": "Starts the development server",
        "optionB": "Runs administrative tasks",
        "optionC": "Manages static files",
        "optionD": "Configures settings",
        "answer": "Runs administrative tasks",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a valid Django template tag?",
        "optionA": "if",
        "optionB": "switch",
        "optionC": "case",
        "optionD": "loop",
        "answer": "if",
        "category": "Django"
    },
    {
        "question_text": "What does the `collectstatic` command do?",
        "optionA": "Starts the development server",
        "optionB": "Collects all static files into a single location",
        "optionC": "Creates database migrations",
        "optionD": "Runs database migrations",
        "answer": "Collects all static files into a single location",
        "category": "Django"
    },
    {
        "question_text": "In Django, what is a middleware?",
        "optionA": "A layer that processes requests and responses",
        "optionB": "A function that renders templates",
        "optionC": "A method that handles forms",
        "optionD": "A model that interacts with the database",
        "answer": "A layer that processes requests and responses",
        "category": "Django"
    },
    {
        "question_text": "What is the default primary key field type in Django models?",
        "optionA": "UUIDField",
        "optionB": "AutoField",
        "optionC": "CharField",
        "optionD": "IntegerField",
        "answer": "AutoField",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a Django model field?",
        "optionA": "DateTimeField",
        "optionB": "TemplateField",
        "optionC": "ViewField",
        "optionD": "UrlPatternField",
        "answer": "DateTimeField",
        "category": "Django"
    },
    {
        "question_text": "How do you specify a URL parameter in Django?",
        "optionA": "<param>",
        "optionB": "(param)",
        "optionC": "{param}",
        "optionD": "<int:param>",
        "answer": "<int:param>",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of Django's `admin.py` file?",
        "optionA": "Configures the admin interface",
        "optionB": "Defines database models",
        "optionC": "Handles URL routing",
        "optionD": "Manages static files",
        "answer": "Configures the admin interface",
        "category": "Django"
    },
    {
        "question_text": "Which command is used to create database migrations?",
        "optionA": "python manage.py migrate",
        "optionB": "python manage.py makemigrations",
        "optionC": "python manage.py startapp",
        "optionD": "python manage.py runserver",
        "answer": "python manage.py makemigrations",
        "category": "Django"
    },
    {
        "question_text": "How do you reference a static file in a Django template?",
        "optionA": "{% static 'file.png' %}",
        "optionB": "{{ static 'file.png' }}",
        "optionC": "{ static 'file.png' }",
        "optionD": "{% load 'file.png' %}",
        "answer": "{% static 'file.png' %}",
        "category": "Django"
    },
    {
        "question_text": "In Django, what is the purpose of the `urls.py` file?",
        "optionA": "Defines URL patterns and maps them to views",
        "optionB": "Handles database migrations",
        "optionC": "Manages static files",
        "optionD": "Configures middleware",
        "answer": "Defines URL patterns and maps them to views",
        "category": "Django"
    },
    {
        "question_text": "What does the `ForeignKey` field type represent in Django?",
        "optionA": "A one-to-one relationship",
        "optionB": "A many-to-one relationship",
        "optionC": "A many-to-many relationship",
        "optionD": "A one-to-many relationship",
        "answer": "A many-to-one relationship",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is NOT a Django model field?",
        "optionA": "CharField",
        "optionB": "ImageField",
        "optionC": "TextField",
        "optionD": "TemplateField",
        "answer": "TemplateField",
        "category": "Django"
    },
    {
        "question_text": "How do you start the Django development server?",
        "optionA": "django-admin startproject",
        "optionB": "python manage.py runserver",
        "optionC": "python manage.py startapp",
        "optionD": "django-admin runserver",
        "answer": "python manage.py runserver",
        "category": "Django"
    },
    {
        "question_text": "Which command is used to create a new Django app?",
        "optionA": "django-admin startproject",
        "optionB": "django-admin startapp",
        "optionC": "python manage.py runserver",
        "optionD": "python manage.py migrate",
        "answer": "django-admin startapp",
        "category": "Django"
    },
    {
        "question_text": "What does the `@csrf_exempt` decorator do?",
        "optionA": "Exempts a view from CSRF protection",
        "optionB": "Handles static file management",
        "optionC": "Defines custom middleware",
        "optionD": "Configures URL routing",
        "answer": "Exempts a view from CSRF protection",
        "category": "Django"
    },
    {
        "question_text": "In Django templates, how do you comment out a line?",
        "optionA": "{# comment #}",
        "optionB": "{% comment %}",
        "optionC": "{{ comment }}",
        "optionD": "{ comment }",
        "answer": "{# comment #}",
        "category": "Django"
    },
    {
        "question_text": "What does the `@permission_required` decorator do?",
        "optionA": "Checks if a user has a specific permission",
        "optionB": "Logs in a user",
        "optionC": "Exempts a view from CSRF protection",
        "optionD": "Handles form validation",
        "answer": "Checks if a user has a specific permission",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is used to configure static files in Django?",
        "optionA": "STATIC_URL",
        "optionB": "MEDIA_URL",
        "optionC": "STATIC_ROOT",
        "optionD": "MEDIA_ROOT",
        "answer": "STATIC_URL",
        "category": "Django"
    },
    {
        "question_text": "In Django, how do you define a URL pattern?",
        "optionA": "Using the `path` function",
        "optionB": "Using the `include` function",
        "optionC": "Using the `redirect` function",
        "optionD": "Using the `url` function",
        "answer": "Using the `path` function",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of Django's `forms.py` file?",
        "optionA": "Defines form classes",
        "optionB": "Handles URL routing",
        "optionC": "Manages static files",
        "optionD": "Configures settings",
        "answer": "Defines form classes",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a built-in Django form field?",
        "optionA": "EmailField",
        "optionB": "ImageField",
        "optionC": "TextField",
        "optionD": "URLField",
        "answer": "EmailField",
        "category": "Django"
    },
    {
        "question_text": "How do you create a new Django superuser?",
        "optionA": "python manage.py createsuperuser",
        "optionB": "django-admin createsuperuser",
        "optionC": "python manage.py startapp",
        "optionD": "django-admin runserver",
        "answer": "python manage.py createsuperuser",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a valid Django view response?",
        "optionA": "HttpResponse",
        "optionB": "JsonResponse",
        "optionC": "TemplateResponse",
        "optionD": "All of the above",
        "answer": "All of the above",
        "category": "Django"
    },
    {
        "question_text": "What does the `models.py` file contain in a Django app?",
        "optionA": "Database model definitions",
        "optionB": "View function definitions",
        "optionC": "URL pattern definitions",
        "optionD": "Form class definitions",
        "answer": "Database model definitions",
        "category": "Django"
    },
    {
        "question_text": "How do you add a new URL pattern in Django?",
        "optionA": "Edit the `urls.py` file",
        "optionB": "Edit the `models.py` file",
        "optionC": "Edit the `views.py` file",
        "optionD": "Edit the `forms.py` file",
        "answer": "Edit the `urls.py` file",
        "category": "Django"
    },
    {
        "question_text": "What does the `ManyToManyField` field type represent in Django?",
        "optionA": "A one-to-one relationship",
        "optionB": "A many-to-one relationship",
        "optionC": "A many-to-many relationship",
        "optionD": "A one-to-many relationship",
        "answer": "A many-to-many relationship",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is NOT a valid Django settings variable?",
        "optionA": "INSTALLED_APPS",
        "optionB": "MIDDLEWARE",
        "optionC": "TEMPLATE_DIR",
        "optionD": "DATABASES",
        "answer": "TEMPLATE_DIR",
        "category": "Django"
    },
    {
        "question_text": "In Django, how do you define a model?",
        "optionA": "By creating a class that inherits from `django.db.models.Model`",
        "optionB": "By creating a class that inherits from `django.forms.Form`",
        "optionC": "By creating a class that inherits from `django.template.Template`",
        "optionD": "By creating a class that inherits from `django.urls.path`",
        "answer": "By creating a class that inherits from `django.db.models.Model`",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of the `__str__` method in a Django model?",
        "optionA": "Defines a human-readable string representation",
        "optionB": "Defines the model's primary key",
        "optionC": "Defines a custom query",
        "optionD": "Defines a one-to-one relationship",
        "answer": "Defines a human-readable string representation",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is used to configure URL routing in Django?",
        "optionA": "urls.py",
        "optionB": "views.py",
        "optionC": "models.py",
        "optionD": "settings.py",
        "answer": "urls.py",
        "category": "Django"
    }
,    {
        "question_text": "Which command is used to create a new Django app?",
        "optionA": "django-admin startproject",
        "optionB": "django-admin startapp",
        "optionC": "django-admin runserver",
        "optionD": "django-admin makemigrations",
        "answer": "django-admin startapp",
        "category": "Django"
    },
    {
        "question_text": "What does the `manage.py` file do in a Django project?",
        "optionA": "Manages the database schema",
        "optionB": "Runs administrative tasks",
        "optionC": "Serves static files",
        "optionD": "Configures settings",
        "answer": "Runs administrative tasks",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a built-in Django field type?",
        "optionA": "EmailField",
        "optionB": "JSONField",
        "optionC": "ImageField",
        "optionD": "IPAddressField",
        "answer": "EmailField",
        "category": "Django"
    },
    {
        "question_text": "What is the default database used by Django?",
        "optionA": "SQLite",
        "optionB": "PostgreSQL",
        "optionC": "MySQL",
        "optionD": "Oracle",
        "answer": "SQLite",
        "category": "Django"
    },
    {
        "question_text": "In Django, what is a QuerySet?",
        "optionA": "A set of database queries",
        "optionB": "A list of model instances",
        "optionC": "A set of URL patterns",
        "optionD": "A group of views",
        "answer": "A list of model instances",
        "category": "Django"
    },
    {
        "question_text": "What does the `makemigrations` command do?",
        "optionA": "Applies migrations to the database",
        "optionB": "Generates new migration files",
        "optionC": "Starts the development server",
        "optionD": "Creates a new app",
        "answer": "Generates new migration files",
        "category": "Django"
    },
    {
        "question_text": "Which decorator is used to restrict access to a view to logged-in users?",
        "optionA": "login_required",
        "optionB": "user_passes_test",
        "optionC": "permission_required",
        "optionD": "csrf_exempt",
        "answer": "login_required",
        "category": "Django"
    },
    {
        "question_text": "How do you include another URLconf in a Django project?",
        "optionA": "Using the `include` function",
        "optionB": "Using the `path` function",
        "optionC": "Using the `re_path` function",
        "optionD": "Using the `url` function",
        "answer": "Using the `include` function",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is NOT a valid Django template tag?",
        "optionA": "for",
        "optionB": "if",
        "optionC": "include",
        "optionD": "else",
        "answer": "else",
        "category": "Django"
    },
    {
        "question_text": "What does the `static` template tag do?",
        "optionA": "Serves static files",
        "optionB": "Loads static files",
        "optionC": "Configures static file settings",
        "optionD": "Defines static file paths",
        "answer": "Loads static files",
        "category": "Django"
    },
    {
        "question_text": "How do you create a superuser in Django?",
        "optionA": "django-admin createsuperuser",
        "optionB": "python manage.py createsuperuser",
        "optionC": "django-admin runserver",
        "optionD": "python manage.py migrate",
        "answer": "python manage.py createsuperuser",
        "category": "Django"
    },
    {
        "question_text": "Which file is used to configure the database in a Django project?",
        "optionA": "models.py",
        "optionB": "settings.py",
        "optionC": "urls.py",
        "optionD": "views.py",
        "answer": "settings.py",
        "category": "Django"
    },
    {
        "question_text": "Which command is used to collect static files in Django?",
        "optionA": "python manage.py runserver",
        "optionB": "python manage.py collectstatic",
        "optionC": "python manage.py makemigrations",
        "optionD": "python manage.py migrate",
        "answer": "python manage.py collectstatic",
        "category": "Django"
    },
    {
        "question_text": "What does the `admin.site.register` function do?",
        "optionA": "Registers a model with the admin site",
        "optionB": "Registers a URL with the admin site",
        "optionC": "Registers a template with the admin site",
        "optionD": "Registers a view with the admin site",
        "answer": "Registers a model with the admin site",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a Django form field?",
        "optionA": "CharField",
        "optionB": "TextField",
        "optionC": "ImageField",
        "optionD": "SlugField",
        "answer": "CharField",
        "category": "Django"
    },
    {
        "question_text": "In Django, what is a model?",
        "optionA": "A form definition",
        "optionB": "A database schema definition",
        "optionC": "A view function",
        "optionD": "A template",
        "answer": "A database schema definition",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is used to define a URL pattern in Django?",
        "optionA": "path",
        "optionB": "view",
        "optionC": "model",
        "optionD": "template",
        "answer": "path",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of Django's `migrate` command?",
        "optionA": "Creates new migrations",
        "optionB": "Applies migrations to the database",
        "optionC": "Starts the development server",
        "optionD": "Creates a new project",
        "answer": "Applies migrations to the database",
        "category": "Django"
    },
    {
        "question_text": "What does the `ForeignKey` field type represent in Django?",
        "optionA": "A one-to-one relationship",
        "optionB": "A many-to-one relationship",
        "optionC": "A many-to-many relationship",
        "optionD": "A one-to-many relationship",
        "answer": "A many-to-one relationship",
        "category": "Django"
    },
    {
        "question_text": "How do you define a one-to-one relationship in Django models?",
        "optionA": "Using `ForeignKey`",
        "optionB": "Using `OneToOneField`",
        "optionC": "Using `ManyToManyField`",
        "optionD": "Using `CharField`",
        "answer": "Using `OneToOneField`",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is NOT a Django middleware?",
        "optionA": "AuthenticationMiddleware",
        "optionB": "SessionMiddleware",
        "optionC": "CacheMiddleware",
        "optionD": "StaticFilesMiddleware",
        "answer": "StaticFilesMiddleware",
        "category": "Django"
    },
    {
        "question_text": "In Django templates, how do you display a variable's value?",
        "optionA": "{{ variable }}",
        "optionB": "{% variable %}",
        "optionC": "{ variable }",
        "optionD": "{% display variable %}",
        "answer": "{{ variable }}",
        "category": "Django"
    },
    {
        "question_text": "What does the `@login_required` decorator do?",
        "optionA": "Exempts a view from CSRF protection",
        "optionB": "Restricts access to logged-in users",
        "optionC": "Checks user permissions",
        "optionD": "Redirects to a login page",
        "answer": "Restricts access to logged-in users",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is used to render an HTML template in Django?",
        "optionA": "render",
        "optionB": "redirect",
        "optionC": "HttpResponse",
        "optionD": "JsonResponse",
        "answer": "render",
        "category": "Django"
    },
    {
        "question_text": "How do you specify a related name for a reverse relation in Django models?",
        "optionA": "Using `related_name`",
        "optionB": "Using `related_field`",
        "optionC": "Using `related_query_name`",
        "optionD": "Using `related_relation`",
        "answer": "Using `related_name`",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a Django settings variable?",
        "optionA": "DATABASES",
        "optionB": "DATABASE_URL",
        "optionC": "DATABASE_URI",
        "optionD": "DATABASE_CONFIG",
        "answer": "DATABASES",
        "category": "Django"
    },
    {
        "question_text": "What does the `__str__` method in a Django model do?",
        "optionA": "Defines a human-readable string representation",
        "optionB": "Defines the model's primary key",
        "optionC": "Defines a custom query",
        "optionD": "Defines a one-to-one relationship",
        "answer": "Defines a human-readable string representation",
        "category": "Django"
    },
    {
        "question_text": "Which command is used to create database migrations based on model changes?",
        "optionA": "python manage.py migrate",
        "optionB": "python manage.py makemigrations",
        "optionC": "python manage.py startapp",
        "optionD": "python manage.py runserver",
        "answer": "python manage.py makemigrations",
        "category": "Django"
    },
    {
        "question_text": "In Django, how do you define a form class?",
        "optionA": "By creating a class that inherits from `django.forms.Form`",
        "optionB": "By creating a class that inherits from `django.db.models.Model`",
        "optionC": "By creating a class that inherits from `django.views.View`",
        "optionD": "By creating a class that inherits from `django.template.Template`",
        "answer": "By creating a class that inherits from `django.forms.Form`",
        "category": "Django"
    },
    {
        "question_text": "What does the `HttpResponse` class do?",
        "optionA": "Renders an HTML template",
        "optionB": "Redirects to another URL",
        "optionC": "Returns an HTTP response",
        "optionD": "Returns a JSON response",
        "answer": "Returns an HTTP response",
        "category": "Django"
    },
    {
        "question_text": "Which Django template tag is used for including another template?",
        "optionA": "include",
        "optionB": "block",
        "optionC": "extends",
        "optionD": "load",
        "answer": "include",
        "category": "Django"
    }
,    {
        "question_text": "What is the primary purpose of Django's `urls.py` file?",
        "optionA": "To handle static file management and serving.",
        "optionB": "To define URL patterns and map them to views.",
        "optionC": "To manage database connections.",
        "optionD": "To configure middleware settings.",
        "answer": "To define URL patterns and map them to views.",
        "category": "Django"
    },
    {
        "question_text": "Which of the following commands is used to create a new Django project?",
        "optionA": "django-admin startproject",
        "optionB": "django-admin startapp",
        "optionC": "django-admin runserver",
        "optionD": "django-admin makemigrations",
        "answer": "django-admin startproject",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of Django's `settings.py` file?",
        "optionA": "To configure the project's URL routing.",
        "optionB": "To define the project's settings and configurations.",
        "optionC": "To manage the project's static files.",
        "optionD": "To create and manage database migrations.",
        "answer": "To define the project's settings and configurations.",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is the correct command to apply migrations in Django?",
        "optionA": "python manage.py migrate",
        "optionB": "python manage.py makemigrations",
        "optionC": "python manage.py runserver",
        "optionD": "python manage.py createsuperuser",
        "answer": "python manage.py migrate",
        "category": "Django"
    },
    {
        "question_text": "In Django, what is the purpose of the `models.py` file?",
        "optionA": "To handle URL routing.",
        "optionB": "To define the data models for the application.",
        "optionC": "To manage static files.",
        "optionD": "To create forms and handle form validation.",
        "answer": "To define the data models for the application.",
        "category": "Django"
    },
    {
        "question_text": "Which command is used to start the Django development server?",
        "optionA": "python manage.py runserver",
        "optionB": "python manage.py startapp",
        "optionC": "python manage.py makemigrations",
        "optionD": "python manage.py migrate",
        "answer": "python manage.py runserver",
        "category": "Django"
    },
    {
        "question_text": "What does the Django ORM stand for?",
        "optionA": "Object-Relational Management",
        "optionB": "Object-Resource Mapping",
        "optionC": "Object-Relational Mapping",
        "optionD": "Object-Resource Management",
        "answer": "Object-Relational Mapping",
        "category": "Django"
    },
    {
        "question_text": "How do you define a model in Django?",
        "optionA": "By creating a class that inherits from `django.db.models.Model`.",
        "optionB": "By creating a function that returns a dictionary.",
        "optionC": "By defining a list of fields in the `views.py` file.",
        "optionD": "By creating a JSON file that lists all the fields.",
        "answer": "By creating a class that inherits from `django.db.models.Model`.",
        "category": "Django"
    },
    {
        "question_text": "Which file in a Django project is used to register models with the admin site?",
        "optionA": "models.py",
        "optionB": "admin.py",
        "optionC": "views.py",
        "optionD": "urls.py",
        "answer": "admin.py",
        "category": "Django"
    },
    {
        "question_text": "In Django, what is the purpose of the `views.py` file?",
        "optionA": "To define URL patterns.",
        "optionB": "To manage database migrations.",
        "optionC": "To define the logic for handling requests and returning responses.",
        "optionD": "To configure the project's settings.",
        "answer": "To define the logic for handling requests and returning responses.",
        "category": "Django"
    }
,    {
        "question_text": "How do you create a new Django project?",
        "optionA": "django-admin startproject projectname",
        "optionB": "django-admin createproject projectname",
        "optionC": "django-admin newproject projectname",
        "optionD": "django-admin initproject projectname",
        "answer": "django-admin startproject projectname",
        "category": "Django"
    },
    {
        "question_text": "Which template tag is used to render variables in Django templates?",
        "optionA": "{{ variable }}",
        "optionB": "{% variable %}",
        "optionC": "{# variable #}",
        "optionD": "{@ variable @}",
        "answer": "{{ variable }}",
        "category": "Django"
    },
    {
        "question_text": "What does the `get_object_or_404` function do in Django?",
        "optionA": "Returns a model instance or raises a 404 error if not found",
        "optionB": "Deletes a model instance or raises a 404 error if not found",
        "optionC": "Creates a model instance or raises a 404 error if not found",
        "optionD": "Updates a model instance or raises a 404 error if not found",
        "answer": "Returns a model instance or raises a 404 error if not found",
        "category": "Django"
    },
    {
        "question_text": "Which method is used to handle form submissions in Django views?",
        "optionA": "POST",
        "optionB": "GET",
        "optionC": "PUT",
        "optionD": "DELETE",
        "answer": "POST",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of the `manage.py` file in a Django project?",
        "optionA": "A command-line utility to interact with the project",
        "optionB": "Defines the database models",
        "optionC": "Configures the settings for the project",
        "optionD": "Manages the project's templates",
        "answer": "A command-line utility to interact with the project",
        "category": "Django"
    },
    {
        "question_text": "Which command is used to apply database migrations in Django?",
        "optionA": "python manage.py migrate",
        "optionB": "python manage.py makemigrations",
        "optionC": "python manage.py startapp",
        "optionD": "python manage.py runserver",
        "answer": "python manage.py migrate",
        "category": "Django"
    },
    {
        "question_text": "How do you define a model field for storing large text data in Django?",
        "optionA": "TextField",
        "optionB": "CharField",
        "optionC": "LargeTextField",
        "optionD": "StringField",
        "answer": "TextField",
        "category": "Django"
    },
    {
        "question_text": "What does the `render` function do in Django views?",
        "optionA": "Renders an HTML template with context data",
        "optionB": "Sends a JSON response",
        "optionC": "Redirects to another URL",
        "optionD": "Returns an HTTP response",
        "answer": "Renders an HTML template with context data",
        "category": "Django"
    },
    {
        "question_text": "Which setting in `settings.py` configures the URL for static files?",
        "optionA": "STATIC_URL",
        "optionB": "STATIC_ROOT",
        "optionC": "MEDIA_URL",
        "optionD": "MEDIA_ROOT",
        "answer": "STATIC_URL",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is NOT a built-in Django form field?",
        "optionA": "EmailField",
        "optionB": "DateField",
        "optionC": "ChoiceField",
        "optionD": "NumberField",
        "answer": "NumberField",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of the `urls.py` file in a Django app?",
        "optionA": "Defines URL patterns for the app",
        "optionB": "Defines database models",
        "optionC": "Handles HTTP requests",
        "optionD": "Configures the app's settings",
        "answer": "Defines URL patterns for the app",
        "category": "Django"
    },
    {
        "question_text": "How do you create a Django model field for storing date and time information?",
        "optionA": "DateTimeField",
        "optionB": "DateField",
        "optionC": "TimeField",
        "optionD": "TimestampField",
        "answer": "DateTimeField",
        "category": "Django"
    },
    {
        "question_text": "What does the `django.contrib.auth` module provide?",
        "optionA": "Authentication and authorization functionality",
        "optionB": "Template rendering functionality",
        "optionC": "Static file management functionality",
        "optionD": "Database migration functionality",
        "answer": "Authentication and authorization functionality",
        "category": "Django"
    },
    {
        "question_text": "Which command is used to create a new Django app?",
        "optionA": "python manage.py startapp appname",
        "optionB": "python manage.py createapp appname",
        "optionC": "python manage.py newapp appname",
        "optionD": "python manage.py initapp appname",
        "answer": "python manage.py startapp appname",
        "category": "Django"
    },
    {
        "question_text": "How do you set a default value for a model field in Django?",
        "optionA": "Using the `default` argument",
        "optionB": "Using the `initial` argument",
        "optionC": "Using the `value` argument",
        "optionD": "Using the `default_value` argument",
        "answer": "Using the `default` argument",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a valid Django model field type?",
        "optionA": "EmailField",
        "optionB": "IPAddressField",
        "optionC": "SlugField",
        "optionD": "CurrencyField",
        "answer": "SlugField",
        "category": "Django"
    },
    {
        "question_text": "What does the `@require_http_methods` decorator do in Django?",
        "optionA": "Restricts a view to specific HTTP methods",
        "optionB": "Exempts a view from CSRF protection",
        "optionC": "Handles form validation",
        "optionD": "Checks if a user is authenticated",
        "answer": "Restricts a view to specific HTTP methods",
        "category": "Django"
    },
    {
        "question_text": "How do you serve static files in production with Django?",
        "optionA": "Using a web server like Nginx or Apache",
        "optionB": "Using the built-in development server",
        "optionC": "Using the `django-static` package",
        "optionD": "Using the `runserver` command",
        "answer": "Using a web server like Nginx or Apache",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is used to create custom error pages in Django?",
        "optionA": "Creating custom views for error handlers",
        "optionB": "Modifying the `urls.py` file",
        "optionC": "Editing the `settings.py` file",
        "optionD": "Using the `error_pages.py` file",
        "answer": "Creating custom views for error handlers",
        "category": "Django"
    },
    {
        "question_text": "How do you define a primary key field in a Django model?",
        "optionA": "By setting `primary_key=True` in a field definition",
        "optionB": "By setting `unique=True` in a field definition",
        "optionC": "By setting `index=True` in a field definition",
        "optionD": "By setting `nullable=False` in a field definition",
        "answer": "By setting `primary_key=True` in a field definition",
        "category": "Django"
    },
    {
        "question_text": "What does the `DEBUG` setting do in Django?",
        "optionA": "Enables or disables debug mode",
        "optionB": "Sets the logging level to debug",
        "optionC": "Displays debug information in templates",
        "optionD": "Logs debug messages to the console",
        "answer": "Enables or disables debug mode",
        "category": "Django"
    },
    {
        "question_text": "Which method is used to check if a form is valid in Django?",
        "optionA": "is_valid()",
        "optionB": "validate()",
        "optionC": "check()",
        "optionD": "is_clean()",
        "answer": "is_valid()",
        "category": "Django"
    },
    {
        "question_text": "How do you define a custom template filter in Django?",
        "optionA": "Using the `@register.filter` decorator",
        "optionB": "Using the `@register.template_filter` decorator",
        "optionC": "Using the `@register.custom_filter` decorator",
        "optionD": "Using the `@register.filter_func` decorator",
        "answer": "Using the `@register.filter` decorator",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of the `apps.py` file in a Django app?",
        "optionA": "Configures the app",
        "optionB": "Defines URL patterns",
        "optionC": "Handles HTTP requests",
        "optionD": "Manages static files",
        "answer": "Configures the app",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is NOT a valid Django template filter?",
        "optionA": "add",
        "optionB": "multiply",
        "optionC": "subtract",
        "optionD": "divide",
        "answer": "subtract",
        "category": "Django"
    },
    {
        "question_text": "How do you specify a custom admin site in Django?",
        "optionA": "By subclassing `AdminSite`",
        "optionB": "By editing the `urls.py` file",
        "optionC": "By modifying the `settings.py` file",
        "optionD": "By creating an `admin.py` file",
        "answer": "By subclassing `AdminSite`",
        "category": "Django"
    },
    {
        "question_text": "Which of the following is a valid Django template tag?",
        "optionA": "url",
        "optionB": "path",
        "optionC": "link",
        "optionD": "route",
        "answer": "url",
        "category": "Django"
    },
    {
        "question_text": "What does the `@permission_required` decorator do?",
        "optionA": "Checks if a user has a specific permission",
        "optionB": "Redirects to the login page if the user is not authenticated",
        "optionC": "Exempts a view from CSRF protection",
        "optionD": "Handles form validation",
        "answer": "Checks if a user has a specific permission",
        "category": "Django"
    },
    {
        "question_text": "How do you define a one-to-one relationship in Django models?",
        "optionA": "Using the `OneToOneField`",
        "optionB": "Using the `ForeignKey`",
        "optionC": "Using the `ManyToManyField`",
        "optionD": "Using the `UniqueField`",
        "answer": "Using the `OneToOneField`",
        "category": "Django"
    },
    {
        "question_text": "Which command is used to run tests in a Django project?",
        "optionA": "python manage.py test",
        "optionB": "python manage.py runtests",
        "optionC": "python manage.py checktests",
        "optionD": "python manage.py unittest",
        "answer": "python manage.py test",
        "category": "Django"
    }
]
