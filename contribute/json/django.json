    
 [  
    {
        "question_text": "What is the role of Django's `urlpatterns` list?",
        "optionA": "To define the mapping of URL patterns to view functions or classes.",
        "optionB": "To handle database migrations and schema changes being served in the URL root.",
        "optionC": "To manage static file paths and serving.",
        "optionD": "To configure middleware for request processing.",
        "answer": "To define the mapping of URL patterns to view functions or classes.",
        "category": "Django"
    },
    {
        "question_text": "How do you handle file uploads in Django forms?",
        "optionA": "By using `FileField` or `ImageField` in the form and model, and configuring the form to handle multipart data.",
        "optionB": "By defining file upload logic directly in `views.py`.",
        "optionC": "By configuring file uploads in `settings.py`.",
        "optionD": "By creating custom middleware for file handling.",
        "answer": "By using `FileField` or `ImageField` in the form and model, and configuring the form to handle multipart data.",
        "category": "Django"
    },
    {
        "question_text": "What is Django's `get_object_or_404()` method used for?",
        "optionA": "To retrieve an object or raise a 404 error if it does not exist.",
        "optionB": "To handle form validation and processing if the default 404 method is not called.",
        "optionC": "To manage static file paths and serving.",
        "optionD": "To configure middleware for request handling.",
        "answer": "To retrieve an object or raise a 404 error if it does not exist.",
        "category": "Django"
    },
    {
        "question_text": "How do you use Django's `model_to_dict()` function?",
        "optionA": "To convert a model instance into a dictionary with its field values.",
        "optionB": "To handle static file management and serving.",
        "optionC": "To configure URL routing and view processing.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To convert a model instance into a dictionary with its field values.",
        "category": "Django"
    },
    {
        "question_text": "How can you create a custom template filter in Django?",
        "optionA": "By defining a function in a `templatetags` module and registering it as a filter.",
        "optionB": "By modifying the default template filters provided by Django and applying it in the views.",
        "optionC": "By configuring filters in `settings.py`.",
        "optionD": "By defining filters directly in `views.py`.",
        "answer": "By defining a function in a `templatetags` module and registering it as a filter.",
        "category": "Django"
    },
    {
        "question_text": "How do you set up a Django project to use internationalization (i18n)?",
        "optionA": "By configuring `LANGUAGE_CODE` and `USE_I18N` in `settings.py`, and using translation functions in the code.",
        "optionB": "By defining internationalization settings directly in `models.py`.",
        "optionC": "By modifying URL patterns to include language codes.",
        "optionD": "By creating custom middleware for language handling.",
        "answer": "By configuring `LANGUAGE_CODE` and `USE_I18N` in `settings.py`, and using translation functions in the code.",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of Django's `@receiver` decorator?",
        "optionA": "To connect a function to a Django signal.",
        "optionB": "To handle static file management and serving.",
        "optionC": "To define custom middleware for request handling.",
        "optionD": "To configure URL routing and view processing.",
        "answer": "To connect a function to a Django signal.",
        "category": "Django"
    },
    {
        "question_text": "How do you create a Django middleware class?",
        "optionA": "By creating a class with `__init__`, `process_request`, and/or `process_response` methods.",
        "optionB": "By configuring middleware settings in `settings.py`.",
        "optionC": "By defining middleware logic directly in `views.py`.",
        "optionD": "By modifying Django's built-in middleware classes.",
        "answer": "By creating a class with `__init__`, `process_request`, and/or `process_response` methods.",
        "category": "Django"
    },
    {
        "question_text": "How can you use Django's `default` argument in model fields?",
        "optionA": "To provide a default value for a model field if none is specified.",
        "optionB": "To configure default settings for middleware.",
        "optionC": "To handle static file management and serving if the default url is not provided.",
        "optionD": "To define custom URL patterns.",
        "answer": "To provide a default value for a model field if none is specified.",
        "category": "Django"
    },
    {
        "question_text": "What does Django's `@action` decorator do in the admin interface?",
        "optionA": "To add custom actions to the admin interface for a model.",
        "optionB": "To handle static file management and serving.",
        "optionC": "To configure URL routing and view processing.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To add custom actions to the admin interface for a model.",
        "category": "Django"
    },
    {
        "question_text": "How can you use Django's `FileSystemStorage` class?",
        "optionA": "To manage file storage and retrieval on the local file system.",
        "optionB": "To configure URL routing and view processing.",
        "optionC": "To define custom middleware for file handling.",
        "optionD": "To handle form validation and processing.",
        "answer": "To manage file storage and retrieval on the local file system.",
        "category": "Django"
    },
    {
        "question_text": "What is the role of Django's `signals` framework?",
        "optionA": "To allow different parts of the application to communicate and react to events or changes.",
        "optionB": "To Signal to event listeners and allowing them to handle static file management and serving.",
        "optionC": "To configure URL routing and view processing.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To allow different parts of the application to communicate and react to events or changes.",
        "category": "Django"
    },
    {
        "question_text": "How can you use Django's `signals` to trigger actions after saving a model?",
        "optionA": "By connecting a function to the `post_save` signal for the model.",
        "optionB": "By defining actions directly in `views.py`.",
        "optionC": "By handling actions in `settings.py`.",
        "optionD": "By creating custom middleware for action handling.",
        "answer": "By connecting a function to the `post_save` signal for the model.",
        "category": "Django"
    },
    {
        "question_text": "What is Django's `get_list_or_404()` method used for?",
        "optionA": "To retrieve a list of objects or raise a 404 error if none are found.",
        "optionB": "To handle form validation and processing.",
        "optionC": "To manage static file paths and serving.",
        "optionD": "To configure middleware for request handling.",
        "answer": "To retrieve a list of objects or raise a 404 error if none are found.",
        "category": "Django"
    },
    {
        "question_text": "What is Django's `TestCase` class used for?",
        "optionA": "To write unit tests for Django applications and verify code correctness.",
        "optionB": "To test for exceptions that could arise when handling static files management and serving.",
        "optionC": "To define custom middleware for request handling.",
        "optionD": "To configure URL routing and view processing.",
        "answer": "To write unit tests for Django applications and verify code correctness.",
        "category": "Django"
    },
    {
        "question_text": "How can you use Django's `SelectRelated` method?",
        "optionA": "To perform a single database query for related objects, optimizing performance.",
        "optionB": "To handle form validation and processing.",
        "optionC": "To manage static file paths and serving.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To perform a single database query for related objects, optimizing performance.",
        "category": "Django"
    },
    {
        "question_text": "What does Django's `QuerySet` API provide?",
        "optionA": "Methods for querying and manipulating database records.",
        "optionB": "Handling static file management and serving.",
        "optionC": "Configuring URL routing and view processing.",
        "optionD": "Defining custom middleware for request queries in django settings.py file .",
        "answer": "Methods for querying and manipulating database records.",
        "category": "Django"
    },
    {
        "question_text": "How do you handle database transactions in Django?",
        "optionA": "By using `atomic()` blocks to ensure that a series of database operations are treated as a single transaction.",
        "optionB": "By configuring transaction settings in `settings.py`.",
        "optionC": "By defining transaction handling logic directly in `models.py`.",
        "optionD": "By creating custom middleware for transaction management.",
        "answer": "By using `atomic()` blocks to ensure that a series of database operations are treated as a single transaction.",
        "category": "Django"
    },
    {
        "question_text": "What is Django's `get_or_create()` method?",
        "optionA": "To retrieve an object if it exists, or create it if it does not.",
        "optionB": "To handle static file management and serving if created or being fetched.",
        "optionC": "To define custom middleware for request handling.",
        "optionD": "To configure URL routing and view processing.",
        "answer": "To retrieve an object if it exists, or create it if it does not.",
        "category": "Django"
    },
    {
        "question_text": "How can you use Django's `ModelAdmin` class to customize the admin interface?",
        "optionA": "By subclassing `ModelAdmin` and defining attributes and methods to customize the admin view.",
        "optionB": "By modifying the default admin interface directly in `models.py`.",
        "optionC": "By configuring admin settings in `settings.py`.",
        "optionD": "By creating custom middleware for admin management.",
        "answer": "By subclassing `ModelAdmin` and defining attributes and methods to customize the admin view.",
        "category": "Django"
    },
    {
        "question_text": "What is Django's `SessionMiddleware` used for?",
        "optionA": "To manage user sessions and session data across requests.",
        "optionB": "To handle static file management and serving.",
        "optionC": "To configure URL routing and view processing.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To manage user sessions and session data across requests.",
        "category": "Django"
    },
    {
        "question_text": "How do you use Django's `AdminSite` class to customize the admin site?",
        "optionA": "By subclassing `AdminSite` and overriding methods to change the admin site's behavior and appearance.",
        "optionB": "By modifying the default admin site directly in `models.py`.",
        "optionC": "By configuring admin settings in `settings.py`.",
        "optionD": "By creating custom middleware for admin management.",
        "answer": "By subclassing `AdminSite` and overriding methods to change the admin site's behavior and appearance.",
        "category": "Django"
    },
    {
        "question_text": "How can you use Django's `TransactionMiddleware`?",
        "optionA": "To ensure that database operations within a request are atomic and handled within a transaction.",
        "optionB": "To handle static file management and serving.",
        "optionC": "To configure URL routing and view processing.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To ensure that database operations within a request are atomic and handled within a transaction.",
        "category": "Django"
    },
    {
        "question_text": "What is Django's `CacheMiddleware` used for?",
        "optionA": "To cache the results of views and reduce the load on the database and server.",
        "optionB": "To handle static file management and serving.",
        "optionC": "To configure URL routing and view processing.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To cache the results of views and reduce the load on the database and server.",
        "category": "Django"
    },
    {
        "question_text": "How do you use Django's `Q` objects for complex queries?",
        "optionA": "By using `Q` objects to build complex queries with `AND`, `OR`, and `NOT` conditions.",
        "optionB": "By handling complex queries directly in `views.py`.",
        "optionC": "By configuring query settings in `settings.py`.",
        "optionD": "By creating custom middleware for query handling.",
        "answer": "By using `Q` objects to build complex queries with `AND`, `OR`, and `NOT` conditions.",
        "category": "Django"
    },
    {
        "question_text": "How can you implement pagination in Django views?",
        "optionA": "By using Django's built-in `Paginator` class to divide querysets into pages and render them.",
        "optionB": "By handling pagination directly in `models.py`.",
        "optionC": "By configuring pagination settings in `settings.py`.",
        "optionD": "By creating custom middleware for pagination.",
        "answer": "By using Django's built-in `Paginator` class to divide querysets into pages and render them.",
        "category": "Django"
    },
    {
        "question_text": "How do you use Django's `Context` object in templates?",
        "optionA": "To pass data from views to templates and render dynamic content.",
        "optionB": "To handle static file management and serving.",
        "optionC": "To configure URL routing and view processing.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To pass data from views to templates and render dynamic content.",
        "category": "Django"
    },
    {
        "question_text": "What does Django's `F()` expression do?",
        "optionA": "To reference model field values directly in database queries, allowing for operations like arithmetic.",
        "optionB": "To handle form validation and processing.",
        "optionC": "To manage static file paths and serving.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To reference model field values directly in database queries, allowing for operations like arithmetic.",
        "category": "Django"
    },
    {
        "question_text": "How can you use Django's `related_name` attribute in model fields?",
        "optionA": "To specify a custom name for the reverse relation from a related model.",
        "optionB": "To handle form validation and processing.",
        "optionC": "To manage static file paths and serving.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To specify a custom name for the reverse relation from a related model.",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of Django's `User` model?",
        "optionA": "To manage user authentication and authorization.",
        "optionB": "To handle static file management and serving.",
        "optionC": "To configure URL routing and view processing.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To manage user authentication and authorization.",
        "category": "Django"
    },
    {
        "question_text": "How do you use Django's `@csrf_exempt` decorator?",
        "optionA": "To exempt a view from CSRF protection.",
        "optionB": "To handle static file management and serving.",
        "optionC": "To define custom middleware for request handling.",
        "optionD": "To configure URL routing and view processing.",
        "answer": "To exempt a view from CSRF protection.",
        "category": "Django"
    },
    {
        "question_text": "What does Django's `migrate` command do?",
        "optionA": "To apply and synchronize database schema changes based on migration files.",
        "optionB": "To handle static file management and serving.",
        "optionC": "To define custom middleware for request handling.",
        "optionD": "To configure URL routing and view processing.",
        "answer": "To apply and synchronize database schema changes based on migration files.",
        "category": "Django"
    },
    {
        "question_text": "How can you use Django's `session` framework to store user data?",
        "optionA": "By using the session framework to store and retrieve user-specific data across requests.",
        "optionB": "By handling static file management and serving.",
        "optionC": "By configuring URL routing and view processing.",
        "optionD": "By defining custom middleware for request handling.",
        "answer": "By using the session framework to store and retrieve user-specific data across requests.",
        "category": "Django"
    }
,
    {
        "question_text": "What is the purpose of Django's `DATABASES` setting?",
        "optionA": "To configure database connections and settings for the Django project.",
        "optionB": "To handle user authentication and session management.",
        "optionC": "To manage static file paths and settings.",
        "optionD": "To define URL routing and view processing.",
        "answer": "To configure database connections and settings for the Django project.",
        "category": "Django"
    },
    {
        "question_text": "How can you add middleware to a Django project?",
        "optionA": "By adding the middleware class to the `MIDDLEWARE` list in `settings.py`.",
        "optionB": "By configuring middleware in `urls.py`.",
        "optionC": "By defining middleware logic directly in `views.py`.",
        "optionD": "By creating custom middleware commands in `management/commands`.",
        "answer": "By adding the middleware class to the `MIDDLEWARE` list in `settings.py`.",
        "category": "Django"
    },
    {
        "question_text": "How does Django's `@property` decorator work with model methods?",
        "optionA": "It allows a method to be accessed as a read-only attribute.",
        "optionB": "It configures model fields for better performance.",
        "optionC": "It defines a custom form field for models.",
        "optionD": "It manages static file serving and paths.",
        "answer": "It allows a method to be accessed as a read-only attribute.",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of Django's `select_related()` method?",
        "optionA": "To perform a single SQL query with joined tables to reduce the number of database queries.",
        "optionB": "To handle form validation and processing.",
        "optionC": "To manage static file locations and serving.",
        "optionD": "To configure middleware for enhanced security.",
        "answer": "To perform a single SQL query with joined tables to reduce the number of database queries.",
        "category": "Django"
    },
    {
        "question_text": "How can you customize Django's admin interface?",
        "optionA": "By creating a custom `ModelAdmin` class and registering it with the admin site.",
        "optionB": "By modifying the default admin templates directly.",
        "optionC": "By defining custom middleware for admin views.",
        "optionD": "By configuring admin settings in `settings.py`.",
        "answer": "By creating a custom `ModelAdmin` class and registering it with the admin site.",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of Django's `get_or_create()` method?",
        "optionA": "To retrieve an object if it exists or create it if it does not.",
        "optionB": "To handle form validation and processing.",
        "optionC": "To manage static file paths and settings.",
        "optionD": "To configure middleware for request processing.",
        "answer": "To retrieve an object if it exists or create it if it does not.",
        "category": "Django"
    },
    {
        "question_text": "How can you define a custom manager for a Django model?",
        "optionA": "By creating a subclass of `models.Manager` and adding custom methods.",
        "optionB": "By configuring custom managers in `settings.py`.",
        "optionC": "By defining custom manager methods directly in `models.py`.",
        "optionD": "By modifying the default manager class in Django's core.",
        "answer": "By creating a subclass of `models.Manager` and adding custom methods.",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of Django's `@transaction.atomic` decorator?",
        "optionA": "To ensure that a block of code is executed within a database transaction.",
        "optionB": "To manage static file locations and serving.",
        "optionC": "To handle form validation and processing.",
        "optionD": "To configure middleware for enhanced security.",
        "answer": "To ensure that a block of code is executed within a database transaction.",
        "category": "Django"
    },
    {
        "question_text": "How can you create a custom Django template tag?",
        "optionA": "By defining a custom tag function in a `templatetags` module and registering it.",
        "optionB": "By modifying the default template tags provided by Django.",
        "optionC": "By configuring tags in `settings.py`.",
        "optionD": "By defining tags in `views.py`.",
        "answer": "By defining a custom tag function in a `templatetags` module and registering it.",
        "category": "Django"
    },
    {
        "question_text": "What is Django's `get_list_or_404()` method used for?",
        "optionA": "To retrieve a list of objects or raise a 404 error if none are found.",
        "optionB": "To handle form validation and processing.",
        "optionC": "To manage static file paths and settings.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To retrieve a list of objects or raise a 404 error if none are found.",
        "category": "Django"
    },
    {
        "question_text": "How do you use Django's `signals` framework for model changes?",
        "optionA": "By connecting signal handlers to model signals such as `post_save` or `pre_delete`.",
        "optionB": "By modifying model definitions in `models.py`.",
        "optionC": "By configuring signal settings in `settings.py`.",
        "optionD": "By creating custom management commands for signals.",
        "answer": "By connecting signal handlers to model signals such as `post_save` or `pre_delete`.",
        "category": "Django"
    },
    {
        "question_text": "What does the `@staticmethod` decorator do in Django models?",
        "optionA": "It defines a method that does not require access to the instance or class.",
        "optionB": "It allows a method to modify model fields.",
        "optionC": "It handles form validation and processing.",
        "optionD": "It manages static file paths and serving.",
        "answer": "It defines a method that does not require access to the instance or class.",
        "category": "Django"
    },
    {
        "question_text": "How can you use Django's `manage.py` to create a new app?",
        "optionA": "By running `python manage.py startapp <app_name>` to generate a new application directory.",
        "optionB": "By modifying `settings.py` to include a new app configuration.",
        "optionC": "By creating new app files manually in the project directory.",
        "optionD": "By defining new apps in `urls.py`.",
        "answer": "By running `python manage.py startapp <app_name>` to generate a new application directory.",
        "category": "Django"
    },
    {
        "question_text": "What is Django's `@login_required` decorator used for?",
        "optionA": "To restrict access to a view to authenticated users only.",
        "optionB": "To handle static file management and serving.",
        "optionC": "To configure URL routing and view processing.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To restrict access to a view to authenticated users only.",
        "category": "Django"
    },
    {
        "question_text": "How can you define a custom validation method for a Django form?",
        "optionA": "By creating a method named `clean_<fieldname>` in the form class.",
        "optionB": "By configuring validation settings in `settings.py`.",
        "optionC": "By defining validation logic directly in `models.py`.",
        "optionD": "By using Django's built-in validation functions.",
        "answer": "By creating a method named `clean_<fieldname>` in the form class.",
        "category": "Django"
    },
    {
        "question_text": "What is the purpose of Django's `create()` method in model managers?",
        "optionA": "To create and save a new object in the database in one step.",
        "optionB": "To retrieve an existing object or raise an error if not found.",
        "optionC": "To handle form validation and processing.",
        "optionD": "To manage static file paths and settings.",
        "answer": "To create and save a new object in the database in one step.",
        "category": "Django"
    },
    {
        "question_text": "How can you use Django's `context_processors`?",
        "optionA": "To add context variables to all templates rendered during a request.",
        "optionB": "By configuring context settings in `settings.py`.",
        "optionC": "By defining context processors in `urls.py`.",
        "optionD": "By creating custom context processors in `views.py`.",
        "answer": "To add context variables to all templates rendered during a request.",
        "category": "Django"
    },
    {
        "question_text": "What is the role of Django's `migrations`?",
        "optionA": "To handle changes to the database schema over time.",
        "optionB": "To manage static file paths and serving.",
        "optionC": "To define custom middleware for request handling.",
        "optionD": "To configure URL routing and view processing.",
        "answer": "To handle changes to the database schema over time.",
        "category": "Django"
    },
    {
        "question_text": "How do you specify a custom URL pattern in Django?",
        "optionA": "By adding a new pattern to the `urlpatterns` list in `urls.py`.",
        "optionB": "By defining URL patterns directly in `views.py`.",
        "optionC": "By configuring URL settings in `settings.py`.",
        "optionD": "By creating custom middleware for URL processing.",
        "answer": "By adding a new pattern to the `urlpatterns` list in `urls.py`.",
        "category": "Django"
    },
    {
        "question_text": "What does Django's `admin.site.unregister()` method do?",
        "optionA": "It unregisters a model from the Django admin interface.",
        "optionB": "It defines new models for the admin interface.",
        "optionC": "It handles static file management and serving.",
        "optionD": "It configures middleware for request processing.",
        "answer": "It unregisters a model from the Django admin interface.",
        "category": "Django"
    },
    {
        "question_text": "How can you set up custom URL routing in Django?",
        "optionA": "By defining custom URL patterns in `urls.py` and mapping them to views.",
        "optionB": "By configuring URL routing in `settings.py`.",
        "optionC": "By defining routes directly in `views.py`.",
        "optionD": "By creating custom middleware for URL handling.",
        "answer": "By defining custom URL patterns in `urls.py` and mapping them to views.",
        "category": "Django"
    },
    {
        "question_text": "What is the role of Django's `admin.site.site_header` attribute?",
        "optionA": "To customize the text displayed in the header of the Django admin site.",
        "optionB": "To handle static file management and serving.",
        "optionC": "To configure URL routing and view processing.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To customize the text displayed in the header of the Django admin site.",
        "category": "Django"
    },
    {
        "question_text": "How can you define a one-to-many relationship in Django models?",
        "optionA": "By using a `ForeignKey` field in the model.",
        "optionB": "By defining a `ManyToManyField` in the model.",
        "optionC": "By using a `OneToOneField` in the model.",
        "optionD": "By configuring relationships in `settings.py`.",
        "answer": "By using a `ForeignKey` field in the model.",
        "category": "Django"
    },
    {
        "question_text": "How can yo    u limit the number of objects returned in a Django query?",
        "optionA": "By using the `:n]` slicing notation on a queryset.",
        "optionB": "By configuring query limits in `settings.py`.",
        "optionC": "By defining query limits directly in `models.py`.",
        "optionD": "By using the `l imit()` method on a queryset.",
        "answer": "By using the `:n]` slicing notation on a queryset.",
        "category": "Django"
    },
    {
        "question_text": "How do you handle form submissions in Django views?",
        "optionA": "By checking if the request method is `POST` and validating the form.",
        "optionB": "By configuring form submission settings in `settings.py`.",
        "optionC": "By defining form handling logic in `models.py`.",
        "optionD": "By using custom middleware to process form data.",
        "answer": "By checking if the request method is `POST` and validating the form.",
        "category": "Django"
    },
    {
        "question_text": "What is the `@csrf_exempt` decorator used for in Django?",
        "optionA": "To exempt a view from CSRF protection.",
        "optionB": "To handle static file management and serving.",
        "optionC": "To configure URL routing and view processing.",
        "optionD": "To define custom middleware for request handling.",
        "answer": "To exempt a view from CSRF protection.",
        "category": "Django"
    },
    {
        "question_text": "How can you configure Django's static files settings?",
        "optionA": "By defining `STATIC_URL` and `STATICFILES_DIRS` in `settings.py`.",
        "optionB": "By configuring static file paths in `urls.py`.",
        "optionC": "By creating custom middleware for static file serving.",
        "optionD": "By defining static file settings directly in `models.py`.",
        "answer": "By defining `STATIC_URL` and `STATICFILES_DIRS` in `settings.py`.",
        "category": "Django"
    },
    {
        "question_text": "How can you define a custom template context processor in Django?",
        "optionA": "By creating a function that adds variables to the template context and registering it in `settings.py`.",
        "optionB": "By defining context processors directly in `views.py`.",
        "optionC": "By modifying Django's built-in context processors.",
        "optionD": "By configuring context processors in `models.py`.",
        "answer": "By creating a function that adds variables to the template context and registering it in `settings.py`.",
        "category": "Django"
    },
    {
        "question_text": "What is the role of Django's `reverse()` function?",
        "optionA": "To generate URLs from view names and URL patterns.",
        "optionB": "To handle static file management and serving.",
        "optionC": "To configure middleware for request processing.",
        "optionD": "To define custom model fields.",
        "answer": "To generate URLs from view names and URL patterns.",
        "category": "Django"
    },
    {
        "question_text": "How can you use Django's `prefetch_related()` method?",
        "optionA": "To perform a separate database query for each related object to optimize performance.",
        "optionB": "To handle form validation and processing.",
        "optionC": "To manage static file paths and serving.",
        "optionD": "To configure middleware for enhanced security.",
        "answer": "To perform a separate database query for each related object to optimize performance.",
        "category": "Django"
    },
    {
        "question_text": "What does the `@admin.display` decorator do in Django's admin interface?",
        "optionA": "It customizes the display of model fields and methods in the admin list view.",
        "optionB": "It handles static file management and serving.",
        "optionC": "It configures URL routing and view processing.",
        "optionD": "It defines custom middleware for request handling.",
        "answer": "It customizes the display of model fields and methods in the admin list view.",
        "category": "Django"
    },
    {
        "question_text": "How can you set up a Django project to use multiple databases?",
        "optionA": "By defining multiple database configurations in the `DATABASES` setting and using database routers.",
        "optionB": "By configuring multiple database settings in `settings.py`.",
        "optionC": "By defining databases directly in `models.py`.",
        "optionD": "By creating custom middleware for database management.",
        "answer": "By defining multiple database configurations in the `DATABASES` setting and using database routers.",
        "category": "Django"
    },
    {
        "question_text": "How can you create a custom Django management command?",
        "optionA": "By creating a `management/commands` directory in an app and adding a custom command class.",
        "optionB": "By modifying the `manage.py` file directly.",
        "optionC": "By defining custom commands in `views.py`.",
        "optionD": "By configuring command settings in `settings.py`.",
        "answer": "By creating a `management/commands` directory in an app and adding a custom command class.",
        "category": "Django"
    },
    {
        "question_text": "What does Django's `update_or_create()` method do?",
        "optionA": "It updates an existing object or creates a new one if it does not exist.",
        "optionB": "It handles static file management and serving.",
        "optionC": "It defines custom model fields.",
        "optionD": "It manages URL routing and view processing.",
        "answer": "It updates an existing object or creates a new one if it does not exist.",
        "category": "Django"
    },
       
        {
            "question_text": "What is the purpose of Django's `staticfiles` app?",
            "optionA": "To collect and manage static files such as CSS and JavaScript across the project.",
            "optionB": "To handle user authentication and session management.",
            "optionC": "To manage database migrations and schema changes.",
            "optionD": "To define URL routing and view mappings.",
            "answer": "To collect and manage static files such as CSS and JavaScript across the project.",
            "category": "Django"
        },
        {
            "question_text": "How can you set up a Django application for deployment?",
            "optionA": "By configuring `ALLOWED_HOSTS`, setting `DEBUG` to `False`, and using a production-ready web server.",
            "optionB": "By creating a new app with `python manage.py startapp` and configuring URLs.",
            "optionC": "By using the Django development server for all production environments.",
            "optionD": "By modifying the `settings.py` file to include additional debugging information.",
            "answer": "By configuring `ALLOWED_HOSTS`, setting `DEBUG` to `False`, and using a production-ready web server.",
            "category": "Django"
        },
        {
            "question_text": "What is the `Django REST Framework` (DRF)?",
            "optionA": "A toolkit for building Web APIs in Django applications.",
            "optionB": "A system for managing static files and media.",
            "optionC": "A library for handling database migrations and schema changes.",
            "optionD": "A tool for customizing Django's authentication system.",
            "answer": "A toolkit for building Web APIs in Django applications.",
            "category": "Django"
        },
        {
            "question_text": "How can you define a custom error page in Django for a 404 error?",
            "optionA": "By creating a `404.html` template in your templates directory.",
            "optionB": "By configuring error handling in `urls.py`.",
            "optionC": "By adding a custom error handler function in `views.py`.",
            "optionD": "By setting error codes in `settings.py`.",
            "answer": "By creating a `404.html` template in your templates directory.",
            "category": "Django"
        },
        {
            "question_text": "How does Django handle user sessions?",
            "optionA": "By using session middleware to store and manage user session data.",
            "optionB": "By configuring user session settings in `settings.py`.",
            "optionC": "By creating custom session models in `models.py`.",
            "optionD": "By handling session data directly in the database layer.",
            "answer": "By using session middleware to store and manage user session data.",
            "category": "Django"
        },
        {
            "question_text": "What is the purpose of Django's `context_processors`?",
            "optionA": "To add context variables to all templates automatically.",
            "optionB": "To manage database schema and migrations.",
            "optionC": "To handle static file management and serving.",
            "optionD": "To define custom middleware for request handling.",
            "answer": "To add context variables to all templates automatically.",
            "category": "Django"
        },
        {
            "question_text": "How do you perform a bulk update on Django models?",
            "optionA": "By using `update()` method on a queryset to apply changes in bulk.",
            "optionB": "By iterating through model instances and saving each one individually.",
            "optionC": "By defining a custom management command for bulk updates.",
            "optionD": "By configuring batch processing settings in `settings.py`.",
            "answer": "By using `update()` method on a queryset to apply changes in bulk.",
            "category": "Django"
        },
        {
            "question_text": "What is a Django `Form` class used for?",
            "optionA": "To handle and validate user input in a web form.",
            "optionB": "To define URL routing and view mappings.",
            "optionC": "To manage static file paths and settings.",
            "optionD": "To configure middleware for request processing.",
            "answer": "To handle and validate user input in a web form.",
            "category": "Django"
        },
        {
            "question_text": "How can you ensure that a Django view only responds to POST requests?",
            "optionA": "By using the `@require_POST` decorator to restrict the view to POST requests only.",
            "optionB": "By configuring POST request handling in `settings.py`.",
            "optionC": "By defining the request method in the view's `urls.py` entry.",
            "optionD": "By implementing POST handling logic directly in the view function.",
            "answer": "By using the `@require_POST` decorator to restrict the view to POST requests only.",
            "category": "Django"
        },
        {
            "question_text": "How can you generate a URL for a view in Django?",
            "optionA": "By using the `reverse()` function or the `{% url %}` template tag.",
            "optionB": "By manually specifying the URL in `urls.py`.",
            "optionC": "By using Django's URL routing configuration in `views.py`.",
            "optionD": "By configuring URL patterns in `settings.py`.",
            "answer": "By using the `reverse()` function or the `{% url %}` template tag.",
            "category": "Django"
        },
        {
            "question_text": "What is Django's `signals` framework used for?",
            "optionA": "To allow decoupled applications to get notified when certain actions occur.",
            "optionB": "To handle static file management and serving.",
            "optionC": "To configure URL routing and view processing.",
            "optionD": "To manage user authentication and permissions.",
            "answer": "To allow decoupled applications to get notified when certain actions occur.",
            "category": "Django"
        },
        {
            "question_text": "How can you create a database index on a Django model field?",
            "optionA": "By using the `db_index=True` option in the model field definition.",
            "optionB": "By defining indexes in `settings.py`.",
            "optionC": "By configuring database schema directly in `models.py`.",
            "optionD": "By creating custom management commands for indexing.",
            "answer": "By using the `db_index=True` option in the model field definition.",
            "category": "Django"
        },
        {
            "question_text": "How can you access the current user in a Django template?",
            "optionA": "By using the `user` variable provided by the context.",
            "optionB": "By defining the user in the template's `context_processors`.",
            "optionC": "By accessing the user through the view function directly.",
            "optionD": "By configuring the user settings in `settings.py`.",
            "answer": "By using the `user` variable provided by the context.",
            "category": "Django"
        },
        {
            "question_text": "What is Django's `admin` app used for?",
            "optionA": "To provide a built-in interface for managing and administering site content.",
            "optionB": "To handle user authentication and permissions.",
            "optionC": "To configure static file management and serving.",
            "optionD": "To define custom middleware for request processing.",
            "answer": "To provide a built-in interface for managing and administering site content.",
            "category": "Django"
        },
        {
            "question_text": "How do you use Django's `cache` framework to store a value?",
            "optionA": "By using `cache.set('key', 'value', timeout)` to store the value with an optional timeout.",
            "optionB": "By defining cache settings in `settings.py`.",
            "optionC": "By using `cache.add('key', 'value')` to store the value.",
            "optionD": "By manually editing the cache database tables.",
            "answer": "By using `cache.set('key', 'value', timeout)` to store the value with an optional timeout.",
            "category": "Django"
        },
        {
            "question_text": "How can you paginate querysets in Django?",
            "optionA": "By using Django's `Paginator` class to split the queryset into pages.",
            "optionB": "By manually splitting the queryset in the view function.",
            "optionC": "By configuring pagination settings in `settings.py`.",
            "optionD": "By defining pagination logic in `models.py`.",
            "answer": "By using Django's `Paginator` class to split the queryset into pages.",
            "category": "Django"
        },
        {
            "question_text": "What is the purpose of Django's `csrf_token` template tag?",
            "optionA": "To include a CSRF token in forms for Cross-Site Request Forgery protection.",
            "optionB": "To handle static file management and serving.",
            "optionC": "To define URL routing for different views.",
            "optionD": "To configure middleware settings for enhanced security.",
            "answer": "To include a CSRF token in forms for Cross-Site Request Forgery protection.",
            "category": "Django"
        },
        {
            "question_text": "How can you add custom fields to Django's built-in `User` model?",
            "optionA": "By extending the `AbstractUser` class and adding new fields.",
            "optionB": "By modifying the `User` model directly in `models.py`.",
            "optionC": "By configuring additional user fields in `settings.py`.",
            "optionD": "By defining custom user models in `views.py`.",
            "answer": "By extending the `AbstractUser` class and adding new fields.",
            "category": "Django"
        },
        {
            "question_text": "What does the `@login_required` decorator do?",
            "optionA": "It restricts access to a view to authenticated users only.",
            "optionB": "It handles static file management and serving.",
            "optionC": "It configures URL routing and view processing.",
            "optionD": "It defines custom middleware for request handling.",
            "answer": "It restricts access to a view to authenticated users only.",
            "category": "Django"
        },
        {
            "question_text": "How can you use Django's `model_form_factory` to create a form for a model?",
            "optionA": "By using `modelform_factory(Model)` to dynamically create a form class.",
            "optionB": "By manually defining a form class in `forms.py`.",
            "optionC": "By configuring form settings in `models.py`.",
            "optionD": "By using the `form_class` attribute in view functions.",
            "answer": "By using `modelform_factory(Model)` to dynamically create a form class.",
            "category": "Django"
        },
        {
            "question_text": "What is the purpose of Django's `manage.py` command?",
            "optionA": "To provide a command-line utility for managing Django projects.",
            "optionB": "To configure static file management and serving.",
            "optionC": "To handle URL routing and view processing.",
            "optionD": "To define custom middleware for request handling.",
            "answer": "To provide a command-line utility for managing Django projects.",
            "category": "Django"
        },
        {
            "question_text": "How can you make a Django model field unique?",
            "optionA": "By setting the `unique=True` option in the field definition.",
            "optionB": "By defining custom validation logic in the model's `clean` method.",
            "optionC": "By creating a unique index in the database schema directly.",
            "optionD": "By configuring the field in `settings.py`.",
            "answer": "By setting the `unique=True` option in the field definition.",
            "category": "Django"
        },
        {
            "question_text": "How can you create a Django management command?",
            "optionA": "By creating a `management/commands` directory in an app and adding a custom command class.",
            "optionB": "By modifying the `manage.py` file directly.",
            "optionC": "By configuring management commands in `settings.py`.",
            "optionD": "By defining commands in `views.py`.",
            "answer": "By creating a `management/commands` directory in an app and adding a custom command class.",
            "category": "Django"
        },
        {
            "question_text": "What is Django's `migrate` command used for?",
            "optionA": "To apply and unapply database migrations based on model changes.",
            "optionB": "To create a new Django application.",
            "optionC": "To handle static file management and serving.",
            "optionD": "To define custom middleware for request processing.",
            "answer": "To apply and unapply database migrations based on model changes.",
            "category": "Django"
        },
        {
            "question_text": "How do you override Django's default authentication views?",
            "optionA": "By creating custom views and configuring them in `urls.py`.",
            "optionB": "By modifying the default authentication views in Django's core.",
            "optionC": "By using custom middleware to intercept authentication requests.",
            "optionD": "By defining authentication logic directly in `models.py`.",
            "answer": "By creating custom views and configuring them in `urls.py`.",
            "category": "Django"
        },
        {
            "question_text": "What is Django's `FileField` used for?",
            "optionA": "To handle file uploads and storage in Django models.",
            "optionB": "To manage static file paths and serving.",
            "optionC": "To define custom middleware for file processing.",
            "optionD": "To handle URL routing and view processing.",
            "answer": "To handle file uploads and storage in Django models.",
            "category": "Django"
        },
        {
            "question_text": "How can you implement a custom template filter in Django?",
            "optionA": "By creating a custom filter function in a `templatetags` module and registering it.",
            "optionB": "By configuring filter settings in `settings.py`.",
            "optionC": "By defining filters in `views.py`.",
            "optionD": "By modifying Django's built-in filters.",
            "answer": "By creating a custom filter function in a `templatetags` module and registering it.",
            "category": "Django"
        },
        {
            "question_text": "What is the role of Django's `AbstractBaseUser`?",
            "optionA": "To provide a base class for creating custom user models with custom authentication methods.",
            "optionB": "To handle URL routing and view processing.",
            "optionC": "To manage static file serving and paths.",
            "optionD": "To configure middleware for request handling.",
            "answer": "To provide a base class for creating custom user models with custom authentication methods.",
            "category": "Django"
        },
        {
            "question_text": "How can you use Django's `default` argument for model fields?",
            "optionA": "To specify a default value for a field if no value is provided.",
            "optionB": "To handle field validation errors.",
            "optionC": "To define custom field types.",
            "optionD": "To configure default field options in `settings.py`.",
            "answer": "To specify a default value for a field if no value is provided.",
            "category": "Django"
        },
        {
            "question_text": "What is the purpose of Django's `admin.site.register()` method?",
            "optionA": "To register models with the Django admin interface for management.",
            "optionB": "To define URL routing and view processing.",
            "optionC": "To handle static file management and serving.",
            "optionD": "To configure middleware for request handling.",
            "answer": "To register models with the Django admin interface for management.",
            "category": "Django"
        },
        {
            "question_text": "How can you use Django's `get_object_or_404()` method?",
            "optionA": "By fetching an object from the database or raising a 404 error if not found.",
            "optionB": "By creating a new object if it does not exist.",
            "optionC": "By validating data in a form submission.",
            "optionD": "By handling static file serving and paths.",
            "answer": "By fetching an object from the database or raising a 404 error if not found.",
            "category": "Django"
        },
        {
            "question_text": "How do you add custom headers to a Django response?",
            "optionA": "By modifying the response object and adding headers in a view.",
            "optionB": "By configuring headers in `settings.py`.",
            "optionC": "By defining headers in the template context.",
            "optionD": "By setting headers directly in the URL routing configuration.",
            "answer": "By modifying the response object and adding headers in a view.",
            "category": "Django"
        },
        {
            "question_text": "What is the `Django Signals` framework used for?",
            "optionA": "To allow certain parts of a Django application to get notified when specific events occur.",
            "optionB": "To handle URL routing and view processing.",
            "optionC": "To manage static file paths and serving.",
            "optionD": "To configure middleware for request handling.",
            "answer": "To allow certain parts of a Django application to get notified when specific events occur.",
            "category": "Django"
        },
        {
            "question_text": "How can you set up custom validation for a Django form?",
            "optionA": "By defining custom validation methods in the form class.",
            "optionB": "By configuring validation settings in `settings.py`.",
            "optionC": "By creating validation functions in `views.py`.",
            "optionD": "By modifying the default validation behavior in `models.py`.",
            "answer": "By defining custom validation methods in the form class.",
            "category": "Django"
        },
        {
            "question_text": "How can you use Django's `model` `Meta` class?",
            "optionA": "To configure model options such as database table name, ordering, and permissions.",
            "optionB": "To define additional fields and methods for the model.",
            "optionC": "To handle URL routing and view processing.",
            "optionD": "To manage static file paths and serving.",
            "answer": "To configure model options such as database table name, ordering, and permissions.",
            "category": "Django"
        },
       
           
            {
                "question_text": "What is Django's ORM used for?",
                "optionA": "It manages interactions with the database, making it easier to work with models.",
                "optionB": "It handles session management and user authentication across the application.",
                "optionC": "It configures middleware and integrates various security features into the project.",
                "optionD": "It manages static files and serves them during development and production.",
                "answer": "It manages interactions with the database, making it easier to work with models.",
                "category": "Django"
            },
            {
                "question_text": "What is the purpose of `manage.py`?",
                "optionA": "It provides a command-line utility for executing various Django commands.",
                "optionB": "It defines URL routing and maps paths to corresponding views.",
                "optionC": "It configures middleware settings and integrates security features.",
                "optionD": "It handles form validation and processes user input.",
                "answer": "It provides a command-line utility for executing various Django commands.",
                "category": "Django"
            },
            {
                "question_text": "What does the `urlpatterns` list in Django do?",
                "optionA": "It maps URL patterns to view functions or classes to handle HTTP requests.",
                "optionB": "It defines settings for static file management and serving.",
                "optionC": "It configures database schema and model relationships.",
                "optionD": "It handles session management and user authentication.",
                "answer": "It maps URL patterns to view functions or classes to handle HTTP requests.",
                "category": "Django"
            },
            {
                "question_text": "What is the function of Django's `csrf_exempt` decorator?",
                "optionA": "It exempts a view from Cross-Site Request Forgery (CSRF) protection.",
                "optionB": "It handles static file paths and serves files in development.",
                "optionC": "It manages user authentication and permissions.",
                "optionD": "It configures middleware for enhanced security.",
                "answer": "It exempts a view from Cross-Site Request Forgery (CSRF) protection.",
                "category": "Django"
            },
            {
                "question_text": "How do you create a model in Django?",
                "optionA": "By defining a class that inherits from `models.Model` and specifying fields.",
                "optionB": "By configuring URL patterns in `urls.py`.",
                "optionC": "By creating a new form class in `forms.py`.",
                "optionD": "By adding new settings in `settings.py`.",
                "answer": "By defining a class that inherits from `models.Model` and specifying fields.",
                "category": "Django"
            },
            {
                "question_text": "What is the purpose of `migrations` in Django?",
                "optionA": "To apply schema changes to the database and manage updates.",
                "optionB": "To define URL routing and view mappings.",
                "optionC": "To configure static file paths and settings.",
                "optionD": "To handle user authentication and permissions.",
                "answer": "To apply schema changes to the database and manage updates.",
                "category": "Django"
            },
            {
                "question_text": "How can you include static files in a Django template?",
                "optionA": "By using the `{% static %}` template tag to reference the files.",
                "optionB": "By defining static file paths in `settings.py`.",
                "optionC": "By adding static file references in `urls.py`.",
                "optionD": "By placing static files directly in the `views.py` file.",
                "answer": "By using the `{% static %}` template tag to reference the files.",
                "category": "Django"
            },
            {
                "question_text": "What is the role of the `render()` function in Django?",
                "optionA": "It renders a template with a context and returns an HTTP response.",
                "optionB": "It handles HTTP requests directly without rendering a template.",
                "optionC": "It configures middleware settings for the project.",
                "optionD": "It manages static file paths and serving configurations.",
                "answer": "It renders a template with a context and returns an HTTP response.",
                "category": "Django"
            },
            {
                "question_text": "What is the use of `get_object_or_404()` in Django views?",
                "optionA": "To retrieve an object from the database or raise a 404 error if not found.",
                "optionB": "To handle form validation and user input processing.",
                "optionC": "To configure URL routing and view handling.",
                "optionD": "To manage static file serving and paths.",
                "answer": "To retrieve an object from the database or raise a 404 error if not found.",
                "category": "Django"
            },
            {
                "question_text": "What is a Django `formset`?",
                "optionA": "A collection of Django forms that can be processed together.",
                "optionB": "A utility for handling URL routing and view mappings.",
                "optionC": "A class used for managing static file paths.",
                "optionD": "A method for configuring middleware settings.",
                "answer": "A collection of Django forms that can be processed together.",
                "category": "Django"
            },
            {
                "question_text": "How do you define custom validation for a Django form?",
                "optionA": "By overriding the `clean()` method in the form class.",
                "optionB": "By configuring settings in `settings.py`.",
                "optionC": "By defining custom middleware for validation.",
                "optionD": "By adding URL patterns in `urls.py`.",
                "answer": "By overriding the `clean()` method in the form class.",
                "category": "Django"
            },
            {
                "question_text": "What does the `reverse()` function do in Django?",
                "optionA": "It generates a URL from a view name and optional parameters.",
                "optionB": "It handles static file management and serving.",
                "optionC": "It processes form data and user input.",
                "optionD": "It configures middleware and security settings.",
                "answer": "It generates a URL from a view name and optional parameters.",
                "category": "Django"
            },
            {
                "question_text": "What is the `base.html` template used for?",
                "optionA": "As a base template that other templates can extend from.",
                "optionB": "To manage static file serving and paths.",
                "optionC": "To configure middleware settings for the project.",
                "optionD": "To define custom error pages for the application.",
                "answer": "As a base template that other templates can extend from.",
                "category": "Django"
            },
            {
                "question_text": "How do you handle file uploads in Django?",
                "optionA": "By using `FileField` and `ImageField` in Django models.",
                "optionB": "By configuring static file paths in `settings.py`.",
                "optionC": "By defining file upload handlers in `views.py`.",
                "optionD": "By adding file paths to the URL configuration in `urls.py`.",
                "answer": "By using `FileField` and `ImageField` in Django models.",
                "category": "Django"
            },
            {
                "question_text": "What is the purpose of Django's `ALLOWED_HOSTS` setting?",
                "optionA": "To specify which host/domain names the server is allowed to serve.",
                "optionB": "To configure middleware and request processing.",
                "optionC": "To handle static file serving and management.",
                "optionD": "To define URL patterns and view mappings.",
                "answer": "To specify which host/domain names the server is allowed to serve.",
                "category": "Django"
            },
            {
                "question_text": "What does the `@login_required` decorator do?",
                "optionA": "It restricts access to a view to only authenticated users.",
                "optionB": "It manages static file paths and serving configurations.",
                "optionC": "It configures URL routing for different views.",
                "optionD": "It processes form validation and user input.",
                "answer": "It restricts access to a view to only authenticated users.",
                "category": "Django"
            },
            {
                "question_text": "How do you create a custom management command in Django?",
                "optionA": "By creating a file in the `management/commands` directory of an app.",
                "optionB": "By configuring settings in `settings.py`.",
                "optionC": "By defining a new model class in `models.py`.",
                "optionD": "By adding URL patterns in `urls.py`.",
                "answer": "By creating a file in the `management/commands` directory of an app.",
                "category": "Django"
            },
            {
                "question_text": "How can you manage different environments in Django?",
                "optionA": "By using environment-specific settings files and configurations.",
                "optionB": "By defining URL patterns for each environment.",
                "optionC": "By configuring middleware settings based on the environment.",
                "optionD": "By managing static file locations and serving settings.",
                "answer": "By using environment-specific settings files and configurations.",
                "category": "Django"
            },
            {
                "question_text": "What is Django's `get_or_create()` method used for?",
                "optionA": "To retrieve an object if it exists or create a new one if it doesn't.",
                "optionB": "To configure static file management and serving.",
                "optionC": "To handle URL routing and view processing.",
                "optionD": "To define custom middleware for request handling.",
                "answer": "To retrieve an object if it exists or create a new one if it doesn't.",
                "category": "Django"
            },
            {
                "question_text": "How do you handle multi-language support in Django?",
                "optionA": "By using Django's built-in translation system with `gettext` and language settings.",
                "optionB": "By configuring URL patterns for each language version.",
                "optionC": "By managing static file paths for different languages.",
                "optionD": "By defining custom middleware for language detection.",
                "answer": "By using Django's built-in translation system with `gettext` and language settings.",
                "category": "Django"
            },
            {
                "question_text": "What is Django's `RequestContext` used for?",
                "optionA": "To provide context data to templates, including request-related information.",
                "optionB": "To manage URL routing and view mappings.",
                "optionC": "To handle static file management and serving.",
                "optionD": "To configure middleware settings for the project.",
                "answer": "To provide context data to templates, including request-related information.",
                "category": "Django"
            },
            {
                "question_text": "How do you restrict access to certain views in Django?",
                "optionA": "By using decorators like `@login_required` or `@permission_required`.",
                "optionB": "By configuring static file paths in `settings.py`.",
                "optionC": "By defining URL patterns in `urls.py`.",
                "optionD": "By managing middleware settings and request processing.",
                "answer": "By using decorators like `@login_required` or `@permission_required`.",
                "category": "Django"
            },
            {
                "question_text": "What is a Django `generic view`?",
                "optionA": "A view that provides common functionality for handling typical use cases.",
                "optionB": "A custom view defined for specific application logic.",
                "optionC": "A utility for managing static files and paths.",
                "optionD": "A middleware component for request processing.",
                "answer": "A view that provides common functionality for handling typical use cases.",
                "category": "Django"
            },
            {
                "question_text": "What is the `@receiver` decorator used for in Django signals?",
                "optionA": "To register a function as a signal receiver for a specific signal.",
                "optionB": "To define URL routing patterns for signal-related views.",
                "optionC": "To manage static file references and paths.",
                "optionD": "To handle form validation and input processing.",
                "answer": "To register a function as a signal receiver for a specific signal.",
                "category": "Django"
            },
            {
                "question_text": "How can you create a custom template tag in Django?",
                "optionA": "By defining a new tag in a `templatetags` module and registering it.",
                "optionB": "By configuring URL patterns to handle custom tag processing.",
                "optionC": "By managing static file paths and serving configurations.",
                "optionD": "By defining custom middleware for tag handling.",
                "answer": "By defining a new tag in a `templatetags` module and registering it.",
                "category": "Django"
            },
            {
                "question_text": "What is Django's `cache` framework used for?",
                "optionA": "To store and retrieve data in a cache for improving performance.",
                "optionB": "To handle URL routing and view processing.",
                "optionC": "To manage static file locations and paths.",
                "optionD": "To define custom middleware for caching.",
                "answer": "To store and retrieve data in a cache for improving performance.",
                "category": "Django"
            },
            {
                "question_text": "How do you enable Django's debug mode?",
                "optionA": "By setting `DEBUG = True` in the `settings.py` file.",
                "optionB": "By configuring `DEBUG` settings in `urls.py`.",
                "optionC": "By defining debug middleware in `middleware.py`.",
                "optionD": "By managing static files in `settings.py`.",
                "answer": "By setting `DEBUG = True` in the `settings.py` file.",
                "category": "Django"
            },
            {
                "question_text": "What is Django's `template inheritance`?",
                "optionA": "A mechanism to extend a base template and reuse common layout elements.",
                "optionB": "A way to define URL routing patterns for different templates.",
                "optionC": "A method for handling static file references and paths.",
                "optionD": "A technique for managing form validation and processing.",
                "answer": "A mechanism to extend a base template and reuse common layout elements.",
                "category": "Django"
            },
            {
                "question_text": "What does the `@property` decorator do in Django models?",
                "optionA": "It defines a method as a property, allowing it to be accessed like an attribute.",
                "optionB": "It configures URL routing for model-based views.",
                "optionC": "It manages static file paths and configurations.",
                "optionD": "It handles user authentication and permissions.",
                "answer": "It defines a method as a property, allowing it to be accessed like an attribute.",
                "category": "Django"
            },
            {
                "question_text": "How do you implement custom middleware in Django?",
                "optionA": "By defining a new middleware class with `process_request` and/or `process_response` methods.",
                "optionB": "By configuring static file paths in `settings.py`.",
                "optionC": "By creating custom views and URL patterns.",
                "optionD": "By managing form validation and processing logic.",
                "answer": "By defining a new middleware class with `process_request` and/or `process_response` methods.",
                "category": "Django"
            },
            {
                "question_text": "What is the purpose of Django's `SessionMiddleware`?",
                "optionA": "To manage and handle session data for user-specific information.",
                "optionB": "To configure static file paths and serving settings.",
                "optionC": "To handle URL routing and view processing.",
                "optionD": "To define custom template tags and filters.",
                "answer": "To manage and handle session data for user-specific information.",
                "category": "Django"
            },
            {
                "question_text": "What is a Django `model manager`?",
                "optionA": "A class that provides query methods for interacting with model instances.",
                "optionB": "A utility for handling static files and paths.",
                "optionC": "A method for defining custom middleware.",
                "optionD": "A function for managing URL routing and views.",
                "answer": "A class that provides query methods for interacting with model instances.",
                "category": "Django"
            },
            {
                "question_text": "How can you optimize query performance in Django?",
                "optionA": "By using query optimization techniques like `select_related` and `prefetch_related`.",
                "optionB": "By configuring middleware settings for performance.",
                "optionC": "By managing static file serving and paths.",
                "optionD": "By defining custom template tags for efficiency.",
                "answer": "By using query optimization techniques like `select_related` and `prefetch_related`.",
                "category": "Django"
            },
            {
                "question_text": "What does the `@require_http_methods` decorator do?",
                "optionA": "It restricts access to a view to only specified HTTP methods.",
                "optionB": "It handles static file management and serving.",
                "optionC": "It configures URL routing and view processing.",
                "optionD": "It defines custom middleware for request handling.",
                "answer": "It restricts access to a view to only specified HTTP methods.",
                "category": "Django"
            },
            {
                "question_text": "What is the `Django REST Framework` used for?",
                "optionA": "To build and manage RESTful APIs in Django applications.",
                "optionB": "To handle static file paths and serving configurations.",
                "optionC": "To manage middleware settings and request processing.",
                "optionD": "To define custom error handling pages.",
                "answer": "To build and manage RESTful APIs in Django applications.",
                "category": "Django"
            },
            {
                "question_text": "How do you use Django's `signals`?",
                "optionA": "By connecting functions to signal handlers to perform actions on certain events.",
                "optionB": "By configuring static file paths and serving settings.",
                "optionC": "By managing URL routing and view mappings.",
                "optionD": "By defining custom middleware for signal handling.",
                "answer": "By connecting functions to signal handlers to perform actions on certain events.",
                "category": "Django"
            },
            {
                "question_text": "What is the function of `HttpResponseRedirect`?",
                "optionA": "To redirect the user to a different URL.",
                "optionB": "To handle form validation and processing.",
                "optionC": "To manage static file locations and serving.",
                "optionD": "To configure middleware for enhanced security.",
                "answer": "To redirect the user to a different URL.",
                "category": "Django"
            },
            {
                "question_text": "How can you enable Django's `internationalization` features?",
                "optionA": "By configuring the `LANGUAGES` and `LOCALE_PATHS` settings in `settings.py`.",
                "optionB": "By defining URL routing patterns for each language.",
                "optionC": "By managing static file paths for different languages.",
                "optionD": "By creating custom middleware for language detection.",
                "answer": "By configuring the `LANGUAGES` and `LOCALE_PATHS` settings in `settings.py`.",
                "category": "Django"
            },
            {
                "question_text": "What is the use of `@csrf_protect` decorator?",
                "optionA": "To enforce CSRF protection for a specific view.",
                "optionB": "To handle static file management and serving.",
                "optionC": "To manage middleware settings for security.",
                "optionD": "To define custom error handling pages.",
                "answer": "To enforce CSRF protection for a specific view.",
                "category": "Django"
            },
            {
                "question_text": "What does Django's `User` model provide?",
                "optionA": "It provides user authentication and profile management features.",
                "optionB": "It handles static file paths and serving settings.",
                "optionC": "It configures middleware for request handling.",
                "optionD": "It defines custom template tags and filters.",
                "answer": "It provides user authentication and profile management features.",
                "category": "Django"
            }
        ]
            
